{"remainingRequest":"/home/alan/Documents/Learn/vuejs/calculator/node_modules/babel-loader/lib/index.js!/home/alan/Documents/Learn/vuejs/calculator/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alan/Documents/Learn/vuejs/calculator/src/components/Calculator.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/alan/Documents/Learn/vuejs/calculator/src/components/Calculator.vue","mtime":1530738204477},{"path":"/home/alan/Documents/Learn/vuejs/calculator/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/alan/Documents/Learn/vuejs/calculator/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/home/alan/Documents/Learn/vuejs/calculator/node_modules/vue-loader/lib/index.js","mtime":1527860006000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _ = require('lodash');\n\nimport DisplayBar from \"./DisplayBar\";\nimport BaseButton from \"./_Button\";\nvar numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', \".\", \"C\"];\nvar symbols = [\"AC\", \"+/-\", \"%\", '+', '-', '*', '/', '='];\nvar codeDict = {\n  '+': [107, 187],\n  '*': [108],\n  '-': [109, 189],\n  '.': [110, 190],\n  '/': [111, 191],\n  '=': [108, 13, 32],\n  'C': [8, 46],\n  'AC': [27],\n  '+/-': [9]\n};\nvar symbolDict = {\n  '+': _.add,\n  '-': _.subtract,\n  '*': _.multiply,\n  '/': _.divide,\n  '=': function _(a) {\n    return a;\n  }\n};\nexport default {\n  name: \"calculator\",\n  data: function data() {\n    return {\n      numbers: numbers,\n      symbols: symbols,\n      symbolDict: symbolDict,\n      codeDict: codeDict,\n      displayData: \"\",\n      isNew: true,\n      isPrime: true,\n      memData: null,\n      operator: null\n    };\n  },\n  components: {\n    DisplayBar: DisplayBar,\n    BaseButton: BaseButton\n  },\n  methods: {\n    initialize: function initialize() {\n      this.isNew = true;\n      this.isPrime = true;\n      this.displayData = \"\";\n      this.memData = null;\n      this.operator = null;\n    },\n    calculate: function calculate(operator, data) {\n      this.memData = this.symbolDict[operator](this.memData, data);\n      this.displayData = this.memData.toString();\n    },\n    decide: function decide(operator, data) {\n      if (this.isNew) {\n        this.calculate(operator, data);\n      } else {\n        this.displayData = this.symbolDict[operator](parseInt(this.displayData), data).toString();\n      }\n\n      this.operator = null;\n    },\n    changeDisplay: function changeDisplay(e) {\n      if (e !== \"C\") {\n        if (this.isNew) {\n          this.displayData = e;\n          this.isNew = false;\n        } else {\n          this.displayData += e;\n        }\n      } else {\n        if (this.isNew) {\n          this.initialize();\n        } else {\n          var l = this.displayData.length;\n          this.displayData = this.displayData.substr(0, l - 1);\n        }\n      }\n    },\n    handleSymbol: function handleSymbol(e) {\n      if (e === \"AC\") {\n        this.initialize();\n      } else if (e === \"+/-\") {\n        this.decide(\"*\", -1);\n      } else if (e === \"%\") {\n        this.decide(\"*\", 0.01);\n      } else {\n        if (!this.isPrime) {\n          this.operator = this.operator ? this.operator : e;\n          this.memData = this.symbolDict[this.operator](this.memData, parseFloat(this.displayData));\n          this.operator = e;\n          this.displayData = this.memData.toString();\n        } else {\n          this.memData = parseInt(this.displayData);\n          this.isPrime = false;\n          this.operator = e;\n        }\n      }\n\n      this.isNew = true;\n    }\n  }\n};",{"version":3,"sources":["Calculator.vue"],"names":[],"mappings":"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","sourcesContent":["<template >\n    <div id=\"container\" >\n        <display-bar :displayData=\"displayData\" id=\"display\"/>\n        <div id=\"func-pad\">\n            <base-button v-for=\"item in symbols.slice(0,3)\" :key=\"item.id\" :name=\"item\" :timeInterval=\"150\" :keyCodeDict=\"codeDict\" :eventName=\"'symClicked'\" @symClicked=\"handleSymbol($event)\"/>\n        </div>\n        <div id=\"num-pad\">\n            <base-button v-for=\"num in numbers\" :key=\"num\" :name=\"num\" :timeInterval=\"150\" :keyCodeDict=\"codeDict\" :eventName=\"'numClicked'\" @numClicked=\"changeDisplay($event)\"/>\n        </div>\n        <div id=\"symbol-pad\">\n            <base-button v-for=\"item in symbols.slice(3,10)\" :key=\"item.id\" :name=\"item\" :timeInterval=\"150\" :keyCodeDict=\"codeDict\" :eventName=\"'symClicked'\" @symClicked=\"handleSymbol($event)\"/>\n        </div>\n    </div>\n</template>\n\n<script>\nconst _ = require('lodash')\nimport DisplayBar from \"./DisplayBar\"\nimport BaseButton from \"./_Button\"\n\nlet numbers = ['1','2','3','4','5','6','7','8','9','0',\".\",\"C\"]\nlet symbols = [\"AC\",\"+/-\",\"%\",'+','-','*','/','=']\nlet codeDict = {\n    '+':[107,187],\n    '*':[108],\n    '-':[109,189],\n    '.':[110,190],\n    '/':[111,191],\n    '=':[108,13,32],\n    'C':[8,46],\n    'AC':[27],\n    '+/-':[9]\n}\nlet symbolDict = {\n    '+':_.add,\n    '-':_.subtract,\n    '*':_.multiply,\n    '/':_.divide,\n    '=':a => a\n}\n\n    export default {\n        name:\"calculator\",\n        data(){\n            return {\n                numbers,\n                symbols,\n                symbolDict,\n                codeDict,\n                displayData:\"\",\n                isNew:true,\n                isPrime:true,\n                memData: null,\n                operator: null,\n            }\n        },\n        components:{\n            DisplayBar,\n            BaseButton,\n        },\n        methods:{\n            initialize(){\n                this.isNew = true\n                this.isPrime = true\n                this.displayData = \"\"\n                this.memData = null\n                this.operator = null\n            },\n\n            calculate(operator,data){\n                this.memData = this.symbolDict[operator](this.memData, data)\n                this.displayData = this.memData.toString()\n            },\n\n            decide(operator,data){\n                if(this.isNew){\n                    this.calculate(operator,data)\n                }else{\n                    this.displayData = this.symbolDict[operator](parseInt(this.displayData), data).toString()\n                }\n                this.operator = null\n            },\n\n            changeDisplay(e){\n                if (e!==\"C\"){\n                    if(this.isNew){\n                        this.displayData = e\n                        this.isNew = false\n                    }else{\n                        this.displayData += e\n                    }\n                } else{\n                    if(this.isNew){\n                        this.initialize()\n                    }else{\n                        let l = this.displayData.length\n                        this.displayData = this.displayData.substr(0,l-1)\n                    }\n                }\n            },\n\n            handleSymbol(e){\n                if(e===\"AC\"){\n                    this.initialize()\n                }\n                else if(e===\"+/-\"){\n                    this.decide(\"*\",-1)\n                }\n                else if(e===\"%\"){\n                    this.decide(\"*\",0.01)\n                }\n                else{\n                    if(! this.isPrime){\n                            this.operator = this.operator ? this.operator : e\n                            this.memData = this.symbolDict[this.operator](this.memData, parseFloat(this.displayData))\n                            this.operator = e\n                            this.displayData = this.memData.toString()\n                        }\n                    else{\n                        this.memData = parseInt(this.displayData)\n                        this.isPrime = false\n                        this.operator = e\n                    }\n            }\n            this.isNew = true\n        }\n    }\n}\n</script>\n\n<style scoped lang=\"scss\">\n#container{\n    border-bottom: 8px darkgrey solid;\n    border-radius: 6% 6% 3% 3%;\n    padding: 2%;\n    background: linear-gradient(0deg, lightgrey, gainsboro);\n    margin: 0 auto;\n    width: 25%;\n    display: grid;\n    grid-template-areas: \n    \"d d d d\"\n    \"f f f s\"\n    \"n n n s\"\n    ;\n}\n\n#display{\n    grid-area: d;\n}\n\n#func-pad{\n    grid-area: f;\n    display: grid;\n    grid-template-columns: repeat(3,1fr);\n    button{\n        color: black;\n        background-color: sandybrown;\n        box-shadow: 0 4px 3px 0 peru;\n    }\n\n    button:hover{\n        color: FIREBRICK;\n    }\n}\n\n#num-pad{\n    grid-area: n;\n    display: grid;\n    grid-template-columns: repeat(3,1fr);\n    button{\n        box-shadow: 0 4px 3px 0 hsl(0, 0, 50);\n    }\n    button:hover{\n            color: coral;\n        }\n    };\n\n#symbol-pad{\n    grid-area: s;\n    display: grid;\n    align-content: stretch;\n    button{\n        color: black;\n        background-color: sandybrown;\n        box-shadow: 0 4px 3px 0 peru;\n    }\n\n    button:hover{\n        color: FIREBRICK;\n    }\n}\n</style>\n"],"sourceRoot":"src/components"}]}