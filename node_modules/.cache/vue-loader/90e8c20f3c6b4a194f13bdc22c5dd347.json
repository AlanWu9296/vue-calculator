{"remainingRequest":"/home/alan/Documents/Learn/vuejs/calculator/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alan/Documents/Learn/vuejs/calculator/src/components/Calculator.vue?vue&type=style&index=0&id=e835979c&scoped=true&lang=scss","dependencies":[{"path":"/home/alan/Documents/Learn/vuejs/calculator/src/components/Calculator.vue","mtime":1530828332968},{"path":"/home/alan/Documents/Learn/vuejs/calculator/node_modules/css-loader/index.js","mtime":0},{"path":"/home/alan/Documents/Learn/vuejs/calculator/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1521907989000},{"path":"/home/alan/Documents/Learn/vuejs/calculator/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/home/alan/node_modules/sass-loader/lib/loader.js","mtime":499162500000},{"path":"/home/alan/Documents/Learn/vuejs/calculator/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/alan/Documents/Learn/vuejs/calculator/node_modules/vue-loader/lib/index.js","mtime":1527860006000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import \"../assets/animation.scss\";\n@import \"../assets/mixins.scss\";\n\n#container{\n    border-bottom: 8px darkgrey solid;\n    border-radius: 6% 6% 3% 3%;\n    padding: 2%;\n    background: linear-gradient(0deg, lightgrey, gainsboro);\n    margin: 0 auto;\n    width: 500px;\n    height: $length*8;\n    display: grid;\n    grid-template-areas: \n    \"d d d d\"\n    \"f f f s\"\n    \"n n n s\"\n    ;\n}\n\n\n#display{\n    grid-area: d;\n}\n\n#func-pad{\n    grid-area: f;\n    display: grid;\n    grid-template-columns: repeat(3,1fr);\n}\n\n#num-pad{\n    grid-area: n;\n    display: grid;\n    grid-template-columns: repeat(3,1fr);\n}\n\n#symbol-pad{\n    grid-area: s;\n    display: grid;\n    align-content: stretch;\n\n}\n\n",{"version":3,"sources":["Calculator.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","file":"Calculator.vue","sourceRoot":"src/components","sourcesContent":["<template >\n    <transition name=\"show\" appear>\n        <div id=\"container\">\n            <transition name=\"slide\" appear>\n                <display-bar :displayData=\"displayData\" id=\"display\" v-if=\"animStep>=1\"/>\n            </transition>\n            <div id=\"func-pad\" is=\"transition-group\" name=\"slide\" appear v-if=\"animStep>=2\">\n                <sym-button v-for=\"item in symbols.slice(0,3)\" :key=\"item\" :name=\"item\" :timeInterval=\"150\" :keyCodeDict=\"codeDict\" :eventName=\"'symClicked'\" @symClicked=\"handleSymbol($event)\"/>\n            </div>\n            <div id=\"num-pad\" is=\"transition-group\" name=\"pop\" appear v-if=\"animStep>=3\">\n                <num-button v-for=\"num in numbers\" :key=\"num\" :name=\"num\" :timeInterval=\"150\" :keyCodeDict=\"codeDict\" :eventName=\"'numClicked'\" @numClicked=\"changeDisplay($event)\"/>\n            </div>\n            <div id=\"symbol-pad\" is=\"transition-group\" name=\"drop\" appear >\n                <sym-button v-for=\"item in functions\" :key=\"item\" :name=\"item\" :timeInterval=\"150\" :keyCodeDict=\"codeDict\" :eventName=\"'symClicked'\" @symClicked=\"handleSymbol($event)\"/>\n            </div>\n        </div>\n    </transition>\n</template>\n\n<script>\nconst _ = require('lodash')\nimport DisplayBar from \"./DisplayBar\"\nimport NumButton from \"./NumButton\"\nimport SymButton from \"./SymButton\"\n\nlet numbers = ['1','2','3','4','5','6','7','8','9','0',\".\",\"C\"]\nlet symbols = [\"AC\",\"+/-\",\"%\",'+','-','*','/','=']\nlet codeDict = {\n    '+':[107,187],\n    '*':[108],\n    '-':[109,189],\n    '.':[110,190],\n    '/':[111,191],\n    '=':[108,13,32],\n    'C':[8,46],\n    'AC':[27],\n    '+/-':[9]\n}\nlet symbolDict = {\n    '+':_.add,\n    '-':_.subtract,\n    '*':_.multiply,\n    '/':_.divide,\n    '=':a => a\n}\n\nexport default {\n    name:\"calculator\",\n    data(){\n        return {\n            numbers,\n            symbols:symbols.slice(0,3),\n            functions:[],\n            symbolDict,\n            codeDict,\n            displayData:\"\",\n            isNew:true,\n            isPrime:true,\n            memData: null,\n            operator: null,\n            animStep:null\n        }\n    },\n    components:{\n        DisplayBar,\n        SymButton,\n        NumButton,\n    },\n    mounted(){\n        let self = this\n        let i = 0\n        let j = 0\n        let id2 = setInterval(\n            function(){\n                if(j<=4){\n                    self.animStep = j\n                    j++\n                }else{\n                    clearInterval(id2)\n                }\n            },\n            400\n        )\n        let functions = symbols.slice(3,10)\n        let id = setInterval(\n            function(){\n                if(i<functions.length){\n                    self.functions.push(functions[i])\n                    i++\n                }else{\n                    clearInterval(id)\n                }\n            },\n            200\n        )\n    },\n    methods:{\n        initialize(){\n            this.isNew = true\n            this.isPrime = true\n            this.displayData = \"\"\n            this.memData = null\n            this.operator = null\n        },\n\n        calculate(operator,data){\n            this.memData = this.symbolDict[operator](this.memData, data)\n            this.displayData = this.memData.toString()\n        },\n\n        decide(operator,data){\n            if(this.isNew){\n                this.calculate(operator,data)\n            }else{\n                this.displayData = this.symbolDict[operator](parseInt(this.displayData), data).toString()\n            }\n            this.operator = null\n        },\n\n        changeDisplay(e){\n            if (e!==\"C\"){\n                if(this.isNew){\n                    this.displayData = e\n                    this.isNew = false\n                }else{\n                    this.displayData += e\n                }\n            } else{\n                if(this.isNew){\n                    this.initialize()\n                }else{\n                    let l = this.displayData.length\n                    this.displayData = this.displayData.substr(0,l-1)\n                }\n            }\n        },\n\n        handleSymbol(e){\n            if(e===\"AC\"){\n                this.initialize()\n            }\n            else if(e===\"+/-\"){\n                this.decide(\"*\",-1)\n            }\n            else if(e===\"%\"){\n                this.decide(\"*\",0.01)\n            }\n            else{\n                if(! this.isPrime){\n                        this.operator = this.operator ? this.operator : e\n                        this.memData = this.symbolDict[this.operator](this.memData, parseFloat(this.displayData))\n                        this.operator = e\n                        this.displayData = this.memData.toString()\n                    }\n                else{\n                    this.memData = parseInt(this.displayData)\n                    this.isPrime = false\n                    this.operator = e\n                }\n        }\n        this.isNew = true\n    }\n}\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"../assets/animation.scss\";\n@import \"../assets/mixins.scss\";\n\n#container{\n    border-bottom: 8px darkgrey solid;\n    border-radius: 6% 6% 3% 3%;\n    padding: 2%;\n    background: linear-gradient(0deg, lightgrey, gainsboro);\n    margin: 0 auto;\n    width: 500px;\n    height: $length*8;\n    display: grid;\n    grid-template-areas: \n    \"d d d d\"\n    \"f f f s\"\n    \"n n n s\"\n    ;\n}\n\n\n#display{\n    grid-area: d;\n}\n\n#func-pad{\n    grid-area: f;\n    display: grid;\n    grid-template-columns: repeat(3,1fr);\n}\n\n#num-pad{\n    grid-area: n;\n    display: grid;\n    grid-template-columns: repeat(3,1fr);\n}\n\n#symbol-pad{\n    grid-area: s;\n    display: grid;\n    align-content: stretch;\n\n}\n\n</style>\n"]}]}