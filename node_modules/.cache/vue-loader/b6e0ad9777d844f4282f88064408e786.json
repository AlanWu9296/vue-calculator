{"remainingRequest":"/home/alan/Documents/Learn/vuejs/calculator/calculator/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alan/Documents/Learn/vuejs/calculator/calculator/src/components/Calculator.vue?vue&type=style&index=0&id=e835979c&scoped=true&lang=css","dependencies":[{"path":"/home/alan/Documents/Learn/vuejs/calculator/calculator/src/components/Calculator.vue","mtime":1530235030931},{"path":"/home/alan/Documents/Learn/vuejs/calculator/calculator/node_modules/css-loader/index.js","mtime":0},{"path":"/home/alan/Documents/Learn/vuejs/calculator/calculator/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1521907989000},{"path":"/home/alan/Documents/Learn/vuejs/calculator/calculator/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/home/alan/Documents/Learn/vuejs/calculator/calculator/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/alan/Documents/Learn/vuejs/calculator/calculator/node_modules/vue-loader/lib/index.js","mtime":1527860006000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#container{\n    margin: 0 25%;\n    display: grid;\n    align-content: space-around;\n    justify-content: space-between;\n    grid-template-areas: \n    \"d d d d\"\n    \"n n n s\"\n    \"n n n s\"\n    \"n n n s\"\n    \"n n n s\"\n    \"n n n s\"\n    ;\n}\n\n#display{\n    grid-area: d;\n}\n\n#num-pad{\n    grid-area: n;\n    display: grid;\n    grid-template-columns: repeat(3,1fr);\n}\n\n#symbol-pad{\n    display: grid;\n}\n",{"version":3,"sources":["Calculator.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"Calculator.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div id=\"container\">\n        <display-bar :displayData=\"displayData\" id=\"display\"/>\n        <div id=\"num-pad\">\n            <div v-for=\"num in numbers\" :key=\"num\">\n                <number-button :name=\"num\" @numClicked=\"changeDisplay($event)\"/>\n            </div>\n        </div>\n        <div id=\"symbol-pad\">\n            <div v-for=\"item in symbols\" :key=\"item.id\">\n                <symbol-button :name=\"item\" @symClicked=\"handleSymbol($event)\"/>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nconst _ = require('lodash')\nimport NumberButton from \"./NumButton\"\nimport SymbolButton from \"./SymbolButton\"\nimport DisplayBar from \"./DisplayBar\"\n\nlet numbers = ['1','2','3','4','5','6','7','8','9','0',\".\"]\nlet symbols = [\"AC\",\"+/-\",\"%\",'+','-','*','/','=']\nlet symbolDict = {\n    '+':_.add,\n    '-':_.subtract,\n    '*':_.multiply,\n    '/':_.divide\n}\n\n    export default {\n        name:\"calculator\",\n        data(){\n            return {\n                numbers,\n                symbols,\n                symbolDict,\n                displayData:\"\",\n                isResult:false,\n                isAfterEqual:false,\n                result:0,\n                memData:0,\n                operator:\"\",\n\n            }\n        },\n        components:{\n            NumberButton,\n            SymbolButton,\n            DisplayBar,\n        },\n        methods:{\n            initialize(){\n                this.isResult = false\n                this.isAfterEqual = false\n                this.displayData = \"\"\n                this.result = 0\n                this.memData = 0\n                this.operator = \"\"\n            },\n            calculate(operator,data){\n                this.memData = this.symbolDict[operator](this.memData, data)\n                this.displayData = this.memData.toString()\n            },\n            decide(operator,data){\n                if(this.isResult){\n                    calculate(operator,data)\n                    this.operator = \"\"\n                }else{\n                    this.displayData = this.symbolDict[operator](this.displayData, data).toString()\n                }\n            },\n            changeDisplay(e){\n                if(this.isResult){\n                    this.displayData = e\n                    this.isResult = false\n                }else{\n                    this.displayData += e\n                }\n            },\n            handleSymbol(e){\n                this.isResult = true\n                if(e===\"AC\"){\n                    this.initialize()\n                }\n                else if(e===\"+/-\"){\n                    this.decide(\"*\",-1)\n                }\n                else if(e===\"%\"){\n                    this.decide(\"*\",0.01)\n                }\n                else if(e===\"=\"){\n                    this.calculate(this.operator,parseFloat(this.displayData))\n                    this.operator = \"\"\n                    this.isAfterEqual = true\n                }\n                else{\n                    this.operator = this.operator ? this.operator : e\n                    if(!this.isAfterEqual){\n                        this.memData = this.symbolDict[this.operator](this.memData, parseFloat(this.displayData))\n                    }\n                    this.isAfterEqual=false\n                    this.operator = e\n                    this.displayData = this.memData.toString()\n                }\n            }\n        }\n    }\n</script>\n\n<style scoped >\n#container{\n    margin: 0 25%;\n    display: grid;\n    align-content: space-around;\n    justify-content: space-between;\n    grid-template-areas: \n    \"d d d d\"\n    \"n n n s\"\n    \"n n n s\"\n    \"n n n s\"\n    \"n n n s\"\n    \"n n n s\"\n    ;\n}\n\n#display{\n    grid-area: d;\n}\n\n#num-pad{\n    grid-area: n;\n    display: grid;\n    grid-template-columns: repeat(3,1fr);\n}\n\n#symbol-pad{\n    display: grid;\n}\n</style>"]}]}