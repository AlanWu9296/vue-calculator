{"remainingRequest":"/home/alan/Documents/Learn/vuejs/calculator/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alan/Documents/Learn/vuejs/calculator/src/components/Calculator.vue?vue&type=style&index=0&id=e835979c&scoped=true&lang=css","dependencies":[{"path":"/home/alan/Documents/Learn/vuejs/calculator/src/components/Calculator.vue","mtime":1530649250704},{"path":"/home/alan/Documents/Learn/vuejs/calculator/node_modules/css-loader/index.js","mtime":0},{"path":"/home/alan/Documents/Learn/vuejs/calculator/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1521907989000},{"path":"/home/alan/Documents/Learn/vuejs/calculator/node_modules/postcss-loader/lib/index.js","mtime":499162500000},{"path":"/home/alan/Documents/Learn/vuejs/calculator/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/alan/Documents/Learn/vuejs/calculator/node_modules/vue-loader/lib/index.js","mtime":1527860006000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#container{\n    border-bottom: 8px darkgrey solid;\n    border-radius: 6% 6% 3% 3%;\n    padding: 2%;\n    background: linear-gradient(0deg, lightgrey, gainsboro);\n    margin: 0 auto;\n    width: 25%;\n    display: grid;\n    grid-template-areas: \n    \"d d d d\"\n    \"f f f s\"\n    \"n n n s\"\n    ;\n}\n\n#display{\n    grid-area: d;\n}\n\n#func-pad{\n    grid-area: f;\n    display: grid;\n    grid-template-columns: repeat(3,1fr);\n}\n\n#num-pad{\n    grid-area: n;\n    display: grid;\n    grid-template-columns: repeat(3,1fr);\n}\n\n#symbol-pad{\n    grid-area: s;\n    display: grid;\n    align-content: stretch\n}\n",{"version":3,"sources":["Calculator.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Calculator.vue","sourceRoot":"src/components","sourcesContent":["<template >\n    <div id=\"container\" >\n        <display-bar :displayData=\"displayData\" id=\"display\"/>\n        <div id=\"func-pad\">\n            <symbol-button v-for=\"item in symbols.slice(0,3)\" :key=\"item.id\" :name=\"item\" @symClicked=\"handleSymbol($event)\"/>\n        </div>\n        <div id=\"num-pad\">\n            <number-button v-for=\"num in numbers\" :key=\"num\" :name=\"num\" :timeInterval=\"150\" @numClicked=\"changeDisplay($event)\"/>\n        </div>\n        <div id=\"symbol-pad\">\n            <symbol-button v-for=\"item in symbols.slice(3,10)\" :key=\"item.id\" :name=\"item\" @symClicked=\"handleSymbol($event)\"/>\n        </div>\n    </div>\n</template>\n\n<script>\nconst _ = require('lodash')\nimport NumberButton from \"./NumButton\"\nimport SymbolButton from \"./SymbolButton\"\nimport DisplayBar from \"./DisplayBar\"\n\nlet numbers = ['1','2','3','4','5','6','7','8','9','0',\".\",\"C\"]\nlet symbols = [\"AC\",\"+/-\",\"%\",'+','-','*','/','=']\nlet codeDict = {\n    '+':[107,187],\n    '*':[108],\n    '-':[109,189],\n    '.':[110,190],\n    '/':[111,191],\n    '=':[108,13,32],\n    'C':[8,46],\n    'AC':[27],\n    '+/-':[9]\n\n}\nlet symbolDict = {\n    '+':_.add,\n    '-':_.subtract,\n    '*':_.multiply,\n    '/':_.divide,\n    '=':a => a\n}\n\n    export default {\n        name:\"calculator\",\n        data(){\n            return {\n                numbers,\n                symbols,\n                symbolDict,\n                displayData:\"\",\n                isNew:true,\n                isPrime:true,\n                memData: null,\n                operator: null,\n            }\n        },\n        components:{\n            NumberButton,\n            SymbolButton,\n            DisplayBar,\n        },\n        methods:{\n            initialize(){\n                this.isNew = true\n                this.isPrime = true\n                this.displayData = \"\"\n                this.memData = null\n                this.operator = null\n            },\n\n            calculate(operator,data){\n                this.memData = this.symbolDict[operator](this.memData, data)\n                this.displayData = this.memData.toString()\n            },\n\n            decide(operator,data){\n                if(this.isNew){\n                    this.calculate(operator,data)\n                }else{\n                    this.displayData = this.symbolDict[operator](parseInt(this.displayData), data).toString()\n                }\n                this.operator = null\n            },\n\n            changeDisplay(e){\n                if (e!==\"C\"){\n                    if(this.isNew){\n                        this.displayData = e\n                        this.isNew = false\n                    }else{\n                        this.displayData += e\n                    }\n                } else{\n                    if(this.isNew){\n                        this.initialize()\n                    }else{\n                        let l = this.displayData.length\n                        this.displayData = this.displayData.substr(0,l-1)\n                    }\n                }\n            },\n\n            handleSymbol(e){\n                if(e===\"AC\"){\n                    this.initialize()\n                }\n                else if(e===\"+/-\"){\n                    this.decide(\"*\",-1)\n                }\n                else if(e===\"%\"){\n                    this.decide(\"*\",0.01)\n                }\n                else{\n                    if(! this.isPrime){\n\n                            this.operator = this.operator ? this.operator : e\n                            this.memData = this.symbolDict[this.operator](this.memData, parseFloat(this.displayData))\n                            this.operator = e\n                            this.displayData = this.memData.toString()\n                        }\n                    else{\n                        this.memData = parseInt(this.displayData)\n                        this.isPrime = false\n                        this.operator = e\n                    }\n            }\n            this.isNew = true\n        }\n    }\n}\n</script>\n\n<style scoped>\n#container{\n    border-bottom: 8px darkgrey solid;\n    border-radius: 6% 6% 3% 3%;\n    padding: 2%;\n    background: linear-gradient(0deg, lightgrey, gainsboro);\n    margin: 0 auto;\n    width: 25%;\n    display: grid;\n    grid-template-areas: \n    \"d d d d\"\n    \"f f f s\"\n    \"n n n s\"\n    ;\n}\n\n#display{\n    grid-area: d;\n}\n\n#func-pad{\n    grid-area: f;\n    display: grid;\n    grid-template-columns: repeat(3,1fr);\n}\n\n#num-pad{\n    grid-area: n;\n    display: grid;\n    grid-template-columns: repeat(3,1fr);\n}\n\n#symbol-pad{\n    grid-area: s;\n    display: grid;\n    align-content: stretch\n}\n</style>\n"]}]}